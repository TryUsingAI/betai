Auth + Cookies Checklist (Next.js 15 + Supabase)
Packages

@supabase/auth-helpers-nextjs

@supabase/supabase-js

One copy each. Verify: npm ls @supabase/auth-helpers-nextjs @supabase/supabase-js.

Env

NEXT_PUBLIC_SUPABASE_URL

NEXT_PUBLIC_SUPABASE_ANON_KEY

Never use the service key in the browser.

Golden rule

Do not read sb-...-auth-token directly. Ever.

In route handlers, await cookies().

Route handler template
// src/app/api/anything/route.ts
import { NextResponse, type NextRequest } from 'next/server'
import { cookies } from 'next/headers'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'

export async function POST(req: NextRequest) {
  const store = await cookies()                     // await is required in routes
  const supabase = createRouteHandlerClient({ cookies: () => store })
  const { data: { user } } = await supabase.auth.getUser()
  if (!user) return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })

  // …your logic…
  return NextResponse.json({ ok: true })
}

Server component / server action template
// RSC or action file
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

export async function getSession() {
  const supabase = createServerComponentClient({ cookies })
  return supabase.auth.getUser()
}

Middleware template (if used)
import { NextResponse } from 'next/server'
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
export async function middleware(req: Request) {
  const res = NextResponse.next()
  const supabase = createMiddlewareClient({ req, res })
  await supabase.auth.getSession()
  return res
}

Client → API calls
await fetch('/api/endpoint', {
  method: 'POST',
  credentials: 'same-origin',   // send cookies
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify(payload),
})

Tests to run per route

Signed out → expect 401.

Signed in → route returns data.

Server logs show a real user.id.

Repo guardrail (optional but recommended)

Create one helper and use it everywhere:

// lib/supabaseRoute.ts
import { cookies } from 'next/headers'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
export async function getSupabaseRoute() {
  const store = await cookies()
  return createRouteHandlerClient({ cookies: () => store })
}


Then in routes: const supabase = await getSupabaseRoute().

How to work with me so we don’t repeat this

At the top of any auth-touching task, state:

“Next.js v15, use route helper. Await cookies().”

Paste the file path and 10–20 lines around the handler signature. I will patch in place.

If you see any cookies().get( or direct sb-... reads, say “replace with helper.” I will refactor.

After I give code, run the two tests above and paste any console stack lines. I will adjust.

If you want, add a TODO comment header to every route file:

// AUTH CHECK: Next.js 15 route. Use createRouteHandlerClient + await cookies().


This keeps the rule visible during edits.